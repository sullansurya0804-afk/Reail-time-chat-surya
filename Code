⚙️ 1. Backend — Node.js + Express + Socket.IO

Step 1 — Setup

Create a folder server and run:

cd server
npm init -y
npm install express socket.io cors

Step 2 — Create index.js

// server/index.js
const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const cors = require('cors');

const app = express();
app.use(cors());

const server = http.createServer(app);

// Setup Socket.io server
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000", // React app
    methods: ["GET", "POST"],
  },
});

// When user connects
io.on('connection', (socket) => {
  console.log(' User connected:', socket.id);

  // Listen for messages
  socket.on('send_message', (data) => {
    console.log('📨 Message:', data);
    io.emit('receive_message', data); // Send to everyone
  });

  socket.on('disconnect', () => {
    console.log(' User disconnected:', socket.id);
  });
});

const PORT = 5000;
server.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));

Run the backend:

node index.js


---

💻 2. Frontend — React + Socket.IO Client

Step 1 — Setup React App

Create a folder client and run:

npx create-react-app client
cd client
npm install socket.io-client


---

Step 2 — src/App.js

// client/src/App.js
import React, { useState } from "react";
import Chat from "./Chat";
import "./App.css";

function App() {
  const [username, setUsername] = useState("");
  const [joined, setJoined] = useState(false);

  const handleJoin = () => {
    if (username.trim()) setJoined(true);
  };

  return (
    <div className="App">
      {!joined ? (
        <div className="join-container">
          <h2>Join Chat</h2>
          <input
            type="text"
            placeholder="Enter your name"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
          />
          <button onClick={handleJoin}>Join</button>
        </div>
      ) : (
        <Chat username={username} />
      )}
    </div>
  );
}

export default App;


---

Step 3 — src/Chat.js

// client/src/Chat.js
import React, { useEffect, useState } from "react";
import { io } from "socket.io-client";

const socket = io.connect("http://localhost:5000");

function Chat({ username }) {
  const [message, setMessage] = useState("");
  const [chat, setChat] = useState([]);

  const sendMessage = () => {
    if (message.trim()) {
      const data = { user: username, text: message };
      socket.emit("send_message", data);
      setMessage("");
    }
  };

  useEffect(() => {
    socket.on("receive_message", (data) => {
      setChat((prev) => [...prev, data]);
    });
  }, []);

  return (
    <div className="chat-container">
      <h2>Welcome, {username} </h2>
      <div className="messages">
        {chat.map((msg, index) => (
          <div key={index} className="msg">
            <strong>{msg.user}:</strong> {msg.text}
          </div>
        ))}
      </div>
      <div className="input-container">
        <input
          type="text"
          placeholder="Type message..."
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          onKeyDown={(e) => e.key === "Enter" && sendMessage()}
        />
        <button onClick={sendMessage}>Send</button>
      </div>
    </div>
  );
}

export default Chat;


---

Step 4 — src/App.css (optional styling)

.App {
  font-family: Arial, sans-serif;
  text-align: center;
  margin-top: 50px;
}

.join-container, .chat-container {
  display: inline-block;
  border: 2px solid #ccc;
  border-radius: 10px;
  padding: 20px;
  min-width: 300px;
}

.messages {
  border: 1px solid #ddd;
  height: 300px;
  overflow-y: auto;
  margin: 10px 0;
  padding: 10px;
}

.msg {
  text-align: left;
  margin-bottom: 5px;
}

.input-container {
  display: flex;
  gap: 10px;
}

input {
  flex: 1;
  padding: 8px;
}
button {
  padding: 8px 16px;
  cursor: pointer;
}


---

 Running the App

1. Start backend

cd server
node index.js


2. Start frontend

cd client
npm start


3. Open http://localhost:3000 in two browser tabs — you’ll see real-time chat messages update instantly. 💬




---

Would you like me to extend this version with private rooms, timestamps, or database (MongoDB) next?
